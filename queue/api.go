/*
-----------------------------------------
AUTOGENERATED INTERFACE FILE, DO NOT EDIT
-----------------------------------------


task queue

This is a sample task queue server.

*/
package main

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	log "github.com/sirupsen/logrus"
)

// CreateRouter creates swagger api router
func CreateRouter(log *log.Logger) *mux.Router {
	r := mux.NewRouter()
	r.Path("/api/v1/dump").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// dump all tasks in queue
		code, resp, err := dump()
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/dump").Error(err)
			return
		}
		if resp != nil {
			jresp, err := json.Marshal(resp)
			if err != nil {
				log.WithField("method", "/dump").Error("fail to format result")
				w.WriteHeader(http.StatusInternalServerError)
				return
			}
			w.WriteHeader(code)
			w.Write(jresp)
			return
		}
		w.WriteHeader(code)
	})

	r.Path("/api/v1/get").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// get next task from queue
		q := r.URL.Query()
		var ClientID *string
		{
			_, ok := q["client_id"]
			if ok {
				ClientIDTmp := q.Get("client_id")
				ClientID = &ClientIDTmp
			} else {
				log.WithField("method", "/get").Warn("no required param client_id")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		var Timeout *int64
		{
			_, ok := q["timeout"]
			if ok {
				TimeoutTmp, err := strconv.ParseInt(q.Get("timeout"), 10, 64)
				if err != nil {
					log.WithField("method", "/get").Warn("bad param timeout")
					w.WriteHeader(http.StatusBadRequest)
					return
				}
				Timeout = &TimeoutTmp
			} else {
				log.WithField("method", "/get").Warn("no required param timeout")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		code, resp, err := getTask(ClientID, Timeout)
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/get").Error(err)
			return
		}
		if resp != nil {
			jresp, err := json.Marshal(resp)
			if err != nil {
				log.WithField("method", "/get").Error("fail to format result")
				w.WriteHeader(http.StatusInternalServerError)
				return
			}
			w.WriteHeader(code)
			w.Write(jresp)
			return
		}
		w.WriteHeader(code)
	})

	r.Path("/api/v1/renew").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// refresh lease on task
		q := r.URL.Query()
		var ClientID *string
		{
			_, ok := q["client_id"]
			if ok {
				ClientIDTmp := q.Get("client_id")
				ClientID = &ClientIDTmp
			} else {
				log.WithField("method", "/renew").Warn("no required param client_id")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		var TaskID *string
		{
			_, ok := q["task_id"]
			if ok {
				TaskIDTmp := q.Get("task_id")
				TaskID = &TaskIDTmp
			} else {
				log.WithField("method", "/renew").Warn("no required param task_id")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		code, err := renewTask(ClientID, TaskID)
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/renew").Error(err)
			return
		}
		w.WriteHeader(code)
	})

	r.Path("/api/v1/ack").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// mark task as done
		q := r.URL.Query()
		var ClientID *string
		{
			_, ok := q["client_id"]
			if ok {
				ClientIDTmp := q.Get("client_id")
				ClientID = &ClientIDTmp
			} else {
				log.WithField("method", "/ack").Warn("no required param client_id")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		var TaskID *string
		{
			_, ok := q["task_id"]
			if ok {
				TaskIDTmp := q.Get("task_id")
				TaskID = &TaskIDTmp
			} else {
				log.WithField("method", "/ack").Warn("no required param task_id")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		code, err := ackTask(ClientID, TaskID)
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/ack").Error(err)
			return
		}
		w.WriteHeader(code)
	})

	r.Path("/api/v1/put").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// add task to queue
		q := r.URL.Query()
		var Data *string
		{
			_, ok := q["data"]
			if ok {
				DataTmp := q.Get("data")
				Data = &DataTmp
			} else {
				log.WithField("method", "/put").Warn("no required param data")
				w.WriteHeader(http.StatusBadRequest)
				return
			}
		}
		var Old *string
		{
			_, ok := q["old"]
			if ok {
				OldTmp := q.Get("old")
				Old = &OldTmp
			}
		}
		var State *string
		{
			_, ok := q["state"]
			if ok {
				StateTmp := q.Get("state")
				State = &StateTmp
			}
		}
		code, err := putTask(Data, Old, State)
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/put").Error(err)
			return
		}
		w.WriteHeader(code)
	})

	r.Path("/api/v1/state").Methods("get").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// get task state cookie
		code, resp, err := getState()
		if err != nil {
			w.WriteHeader(code)
			log.WithField("method", "/state").Error(err)
			return
		}
		if resp != nil {
			jresp, err := json.Marshal(resp)
			if err != nil {
				log.WithField("method", "/state").Error("fail to format result")
				w.WriteHeader(http.StatusInternalServerError)
				return
			}
			w.WriteHeader(code)
			w.Write(jresp)
			return
		}
		w.WriteHeader(code)
	})

	return r
}
