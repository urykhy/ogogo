etcd games: work queue

* terms
task: 
  ID:    unix time with nanoseconds
  Value: arbitraty string
state: some value to allow atomic updates only (must provide old and new in put call to use one)

* add task without state:
curl "localhost:2080/put?task=12345"

* add task with state (initial state is "", add only if old states matches)
curl -v "localhost:2080/put?task=12350&old=&state=A"
curl -v "localhost:2080/put?task=12351&old=A&state=B"

* get current state
curl "localhost:2080/state"

* dump queue state
curl "localhost:2080/dump"

* get tesk
curl "localhost:2080/get?client=123&timeout=10"
>> {"ID":"1559988339875756912","Value":"12347"}

* renew task
curl "localhost:2080/renew?client=123&task=1559988339875756912"

* finish task
curl "localhost:2080/ack?client=123&task=1559988339875756912"

* etcd format:
queue:  <queue-name>:<unixtime> -> data
state:  __state:<queue-name>    -> data
client: __active:<queue-name>:<task-id> -> client_id

* dump etcd keys
etcdctl get __ --from-key=true

* todo
zap loggger ? (etcd client use one)
client go api